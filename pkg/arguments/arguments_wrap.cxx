/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: pkg/arguments/arguments.i

#define SWIGMODULE arguments

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>



typedef long long intgo;
typedef unsigned long long uintgo;


# if !defined(__clang__) && (defined(__i386__) || defined(__x86_64__))
#   define SWIGSTRUCTPACKED __attribute__((__packed__, __gcc_struct__))
# else
#   define SWIGSTRUCTPACKED __attribute__((__packed__))
# endif



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;




#define swiggo_size_assert_eq(x, y, name) typedef char name[(x-y)*(x-y)*-2+1];
#define swiggo_size_assert(t, n) swiggo_size_assert_eq(sizeof(t), n, swiggo_sizeof_##t##_is_not_##n)

swiggo_size_assert(char, 1)
swiggo_size_assert(short, 2)
swiggo_size_assert(int, 4)
typedef long long swiggo_long_long;
swiggo_size_assert(swiggo_long_long, 8)
swiggo_size_assert(float, 4)
swiggo_size_assert(double, 8)

#ifdef __cplusplus
extern "C" {
#endif
extern void crosscall2(void (*fn)(void *, int), void *, int);
extern char* _cgo_topofstack(void) __attribute__ ((weak));
extern void _cgo_allocate(void *, int);
extern void _cgo_panic(void *, int);
#ifdef __cplusplus
}
#endif

static char *_swig_topofstack() {
  if (_cgo_topofstack) {
    return _cgo_topofstack();
  } else {
    return 0;
  }
}

static void _swig_gopanic(const char *p) {
  struct {
    const char *p;
  } SWIGSTRUCTPACKED a;
  a.p = p;
  crosscall2(_cgo_panic, &a, (int) sizeof a);
}




#define SWIG_contract_assert(expr, msg) \
  if (!(expr)) { _swig_gopanic(msg); } else


static _gostring_ Swig_AllocateString(const char *p, size_t l) {
  _gostring_ ret;
  ret.p = (char*)malloc(l);
  memcpy(ret.p, p, l);
  ret.n = l;
  return ret;
}


static void Swig_free(void* p) {
  free(p);
}

static void* Swig_malloc(int c) {
  return malloc(c);
}


#include "arguments.h"

#ifdef __cplusplus
extern "C" {
#endif

void _wrap_Swig_free_arguments_f59005541e345fc4(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;

  arg1 = *(void **)&_swig_go_0;

  Swig_free(arg1);

}


void *_wrap_Swig_malloc_arguments_f59005541e345fc4(intgo _swig_go_0) {
  int arg1 ;
  void *result = 0 ;
  void *_swig_go_result;

  arg1 = (int)_swig_go_0;

  result = (void *)Swig_malloc(arg1);
  *(void **)&_swig_go_result = (void *)result;
  return _swig_go_result;
}


long long _wrap_DEFAULTINTERVAL_get_arguments_f59005541e345fc4() {
  long result;
  long long _swig_go_result;


  result = (long)(long)DEFAULT_INTERVAL;
  _swig_go_result = result;
  return _swig_go_result;
}


long long _wrap_DEFAULTALLOCINTERVAL_get_arguments_f59005541e345fc4() {
  long result;
  long long _swig_go_result;


  result = (long)(long)DEFAULT_ALLOC_INTERVAL;
  _swig_go_result = result;
  return _swig_go_result;
}


intgo _wrap_DEFAULTJSTACKDEPTH_get_arguments_f59005541e345fc4() {
  int result;
  intgo _swig_go_result;


  result = (int)(int)DEFAULT_JSTACKDEPTH;
  _swig_go_result = result;
  return _swig_go_result;
}


_gostring_ _wrap_EVENTCPU_get_arguments_f59005541e345fc4() {
  char *result = 0 ;
  _gostring_ _swig_go_result;


  result = (char *)(char *)EVENT_CPU;
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0);
  return _swig_go_result;
}


_gostring_ _wrap_EVENTALLOC_get_arguments_f59005541e345fc4() {
  char *result = 0 ;
  _gostring_ _swig_go_result;


  result = (char *)(char *)EVENT_ALLOC;
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0);
  return _swig_go_result;
}


_gostring_ _wrap_EVENTLOCK_get_arguments_f59005541e345fc4() {
  char *result = 0 ;
  _gostring_ _swig_go_result;


  result = (char *)(char *)EVENT_LOCK;
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0);
  return _swig_go_result;
}


_gostring_ _wrap_EVENTWALL_get_arguments_f59005541e345fc4() {
  char *result = 0 ;
  _gostring_ _swig_go_result;


  result = (char *)(char *)EVENT_WALL;
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0);
  return _swig_go_result;
}


_gostring_ _wrap_EVENTITIMER_get_arguments_f59005541e345fc4() {
  char *result = 0 ;
  _gostring_ _swig_go_result;


  result = (char *)(char *)EVENT_ITIMER;
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0);
  return _swig_go_result;
}


intgo _wrap_ACTIONNONE_arguments_f59005541e345fc4() {
  Action result;
  intgo _swig_go_result;


  result = ACTION_NONE;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ACTIONSTART_arguments_f59005541e345fc4() {
  Action result;
  intgo _swig_go_result;


  result = ACTION_START;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ACTIONRESUME_arguments_f59005541e345fc4() {
  Action result;
  intgo _swig_go_result;


  result = ACTION_RESUME;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ACTIONSTOP_arguments_f59005541e345fc4() {
  Action result;
  intgo _swig_go_result;


  result = ACTION_STOP;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ACTIONDUMP_arguments_f59005541e345fc4() {
  Action result;
  intgo _swig_go_result;


  result = ACTION_DUMP;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ACTIONCHECK_arguments_f59005541e345fc4() {
  Action result;
  intgo _swig_go_result;


  result = ACTION_CHECK;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ACTIONSTATUS_arguments_f59005541e345fc4() {
  Action result;
  intgo _swig_go_result;


  result = ACTION_STATUS;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ACTIONMEMINFO_arguments_f59005541e345fc4() {
  Action result;
  intgo _swig_go_result;


  result = ACTION_MEMINFO;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ACTIONLIST_arguments_f59005541e345fc4() {
  Action result;
  intgo _swig_go_result;


  result = ACTION_LIST;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ACTIONVERSION_arguments_f59005541e345fc4() {
  Action result;
  intgo _swig_go_result;


  result = ACTION_VERSION;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_ACTIONFULLVERSION_arguments_f59005541e345fc4() {
  Action result;
  intgo _swig_go_result;


  result = ACTION_FULL_VERSION;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_COUNTERSAMPLES_arguments_f59005541e345fc4() {
  Counter result;
  intgo _swig_go_result;


  result = COUNTER_SAMPLES;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_COUNTERTOTAL_arguments_f59005541e345fc4() {
  Counter result;
  intgo _swig_go_result;


  result = COUNTER_TOTAL;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_RINGANY_arguments_f59005541e345fc4() {
  Ring result;
  intgo _swig_go_result;


  result = RING_ANY;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_RINGKERNEL_arguments_f59005541e345fc4() {
  Ring result;
  intgo _swig_go_result;


  result = RING_KERNEL;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_RINGUSER_arguments_f59005541e345fc4() {
  Ring result;
  intgo _swig_go_result;


  result = RING_USER;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_STYLESIMPLE_arguments_f59005541e345fc4() {
  Style result;
  intgo _swig_go_result;


  result = STYLE_SIMPLE;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_STYLEDOTTED_arguments_f59005541e345fc4() {
  Style result;
  intgo _swig_go_result;


  result = STYLE_DOTTED;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_STYLESIGNATURES_arguments_f59005541e345fc4() {
  Style result;
  intgo _swig_go_result;


  result = STYLE_SIGNATURES;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_STYLEANNOTATE_arguments_f59005541e345fc4() {
  Style result;
  intgo _swig_go_result;


  result = STYLE_ANNOTATE;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_STYLELIBNAMES_arguments_f59005541e345fc4() {
  Style result;
  intgo _swig_go_result;


  result = STYLE_LIB_NAMES;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_STYLENOSEMICOLON_arguments_f59005541e345fc4() {
  Style result;
  intgo _swig_go_result;


  result = STYLE_NO_SEMICOLON;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_CSTACKDEFAULT_arguments_f59005541e345fc4() {
  CStack result;
  intgo _swig_go_result;


  result = CSTACK_DEFAULT;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_CSTACKNO_arguments_f59005541e345fc4() {
  CStack result;
  intgo _swig_go_result;


  result = CSTACK_NO;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_CSTACKFP_arguments_f59005541e345fc4() {
  CStack result;
  intgo _swig_go_result;


  result = CSTACK_FP;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_CSTACKDWARF_arguments_f59005541e345fc4() {
  CStack result;
  intgo _swig_go_result;


  result = CSTACK_DWARF;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_CSTACKLBR_arguments_f59005541e345fc4() {
  CStack result;
  intgo _swig_go_result;


  result = CSTACK_LBR;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_OUTPUTNONE_arguments_f59005541e345fc4() {
  Output result;
  intgo _swig_go_result;


  result = OUTPUT_NONE;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_OUTPUTTEXT_arguments_f59005541e345fc4() {
  Output result;
  intgo _swig_go_result;


  result = OUTPUT_TEXT;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_OUTPUTSVG_arguments_f59005541e345fc4() {
  Output result;
  intgo _swig_go_result;


  result = OUTPUT_SVG;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_OUTPUTCOLLAPSED_arguments_f59005541e345fc4() {
  Output result;
  intgo _swig_go_result;


  result = OUTPUT_COLLAPSED;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_OUTPUTFLAMEGRAPH_arguments_f59005541e345fc4() {
  Output result;
  intgo _swig_go_result;


  result = OUTPUT_FLAMEGRAPH;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_OUTPUTTREE_arguments_f59005541e345fc4() {
  Output result;
  intgo _swig_go_result;


  result = OUTPUT_TREE;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_OUTPUTJFR_arguments_f59005541e345fc4() {
  Output result;
  intgo _swig_go_result;


  result = OUTPUT_JFR;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_NOSYSTEMINFO_arguments_f59005541e345fc4() {
  JfrOption result;
  intgo _swig_go_result;


  result = NO_SYSTEM_INFO;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_NOSYSTEMPROPS_arguments_f59005541e345fc4() {
  JfrOption result;
  intgo _swig_go_result;


  result = NO_SYSTEM_PROPS;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_NONATIVELIBS_arguments_f59005541e345fc4() {
  JfrOption result;
  intgo _swig_go_result;


  result = NO_NATIVE_LIBS;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_NOCPULOAD_arguments_f59005541e345fc4() {
  JfrOption result;
  intgo _swig_go_result;


  result = NO_CPU_LOAD;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


intgo _wrap_JFRSYNCOPTS_arguments_f59005541e345fc4() {
  JfrOption result;
  intgo _swig_go_result;


  result = JFR_SYNC_OPTS;

  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


void _wrap_Multiplier_Symbol_set_arguments_f59005541e345fc4(Multiplier *_swig_go_0, char _swig_go_1) {
  Multiplier *arg1 = (Multiplier *) 0 ;
  char arg2 ;

  arg1 = *(Multiplier **)&_swig_go_0;
  arg2 = (char)_swig_go_1;

  if (arg1) (arg1)->symbol = arg2;

}


char _wrap_Multiplier_Symbol_get_arguments_f59005541e345fc4(Multiplier *_swig_go_0) {
  Multiplier *arg1 = (Multiplier *) 0 ;
  char result;
  char _swig_go_result;

  arg1 = *(Multiplier **)&_swig_go_0;

  result = (char) ((arg1)->symbol);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Multiplier_Multiplier_set_arguments_f59005541e345fc4(Multiplier *_swig_go_0, long long _swig_go_1) {
  Multiplier *arg1 = (Multiplier *) 0 ;
  long arg2 ;

  arg1 = *(Multiplier **)&_swig_go_0;
  arg2 = (long)_swig_go_1;

  if (arg1) (arg1)->multiplier = arg2;

}


long long _wrap_Multiplier_Multiplier_get_arguments_f59005541e345fc4(Multiplier *_swig_go_0) {
  Multiplier *arg1 = (Multiplier *) 0 ;
  long result;
  long long _swig_go_result;

  arg1 = *(Multiplier **)&_swig_go_0;

  result = (long) ((arg1)->multiplier);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_delete_Multiplier_arguments_f59005541e345fc4(Multiplier *_swig_go_0) {
  Multiplier *arg1 = (Multiplier *) 0 ;

  arg1 = *(Multiplier **)&_swig_go_0;

  delete arg1;

}


Error *_wrap_Error_OK_get_arguments_f59005541e345fc4() {
  Error *result = 0 ;
  Error *_swig_go_result;


  result = (Error *)&Error::OK;
  *(Error **)&_swig_go_result = (Error *)result;
  return _swig_go_result;
}


Error *_wrap_new_Error_arguments_f59005541e345fc4(_gostring_ _swig_go_0) {
  char *arg1 = (char *) 0 ;
  Error *result = 0 ;
  Error *_swig_go_result;


  arg1 = (char *)malloc(_swig_go_0.n + 1);
  memcpy(arg1, _swig_go_0.p, _swig_go_0.n);
  arg1[_swig_go_0.n] = '\0';


  result = (Error *)new Error((char const *)arg1);
  *(Error **)&_swig_go_result = (Error *)result;
  free(arg1);
  return _swig_go_result;
}


_gostring_ _wrap_Error_Message_arguments_f59005541e345fc4(Error *_swig_go_0) {
  Error *arg1 = (Error *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;

  arg1 = *(Error **)&_swig_go_0;

  result = (char *)(arg1)->message();
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0);
  return _swig_go_result;
}


bool _wrap_Error__bool_operator_arguments_f59005541e345fc4(Error *_swig_go_0) {
  Error *arg1 = (Error *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(Error **)&_swig_go_0;

  result = (bool)(arg1)->operator bool();
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_delete_Error_arguments_f59005541e345fc4(Error *_swig_go_0) {
  Error *arg1 = (Error *) 0 ;

  arg1 = *(Error **)&_swig_go_0;

  delete arg1;

}


void _wrap_Arguments_Action_set_arguments_f59005541e345fc4(Arguments *_swig_go_0, intgo _swig_go_1) {
  Arguments *arg1 = (Arguments *) 0 ;
  Action arg2 ;

  arg1 = *(Arguments **)&_swig_go_0;
  arg2 = (Action)_swig_go_1;

  if (arg1) (arg1)->_action = arg2;

}


intgo _wrap_Arguments_Action_get_arguments_f59005541e345fc4(Arguments *_swig_go_0) {
  Arguments *arg1 = (Arguments *) 0 ;
  Action result;
  intgo _swig_go_result;

  arg1 = *(Arguments **)&_swig_go_0;

  result = (Action) ((arg1)->_action);
  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


void _wrap_Arguments_Counter_set_arguments_f59005541e345fc4(Arguments *_swig_go_0, intgo _swig_go_1) {
  Arguments *arg1 = (Arguments *) 0 ;
  Counter arg2 ;

  arg1 = *(Arguments **)&_swig_go_0;
  arg2 = (Counter)_swig_go_1;

  if (arg1) (arg1)->_counter = arg2;

}


intgo _wrap_Arguments_Counter_get_arguments_f59005541e345fc4(Arguments *_swig_go_0) {
  Arguments *arg1 = (Arguments *) 0 ;
  Counter result;
  intgo _swig_go_result;

  arg1 = *(Arguments **)&_swig_go_0;

  result = (Counter) ((arg1)->_counter);
  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


void _wrap_Arguments_Ring_set_arguments_f59005541e345fc4(Arguments *_swig_go_0, intgo _swig_go_1) {
  Arguments *arg1 = (Arguments *) 0 ;
  Ring arg2 ;

  arg1 = *(Arguments **)&_swig_go_0;
  arg2 = (Ring)_swig_go_1;

  if (arg1) (arg1)->_ring = arg2;

}


intgo _wrap_Arguments_Ring_get_arguments_f59005541e345fc4(Arguments *_swig_go_0) {
  Arguments *arg1 = (Arguments *) 0 ;
  Ring result;
  intgo _swig_go_result;

  arg1 = *(Arguments **)&_swig_go_0;

  result = (Ring) ((arg1)->_ring);
  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


void _wrap_Arguments_Event_set_arguments_f59005541e345fc4(Arguments *_swig_go_0, _gostring_ _swig_go_1) {
  Arguments *arg1 = (Arguments *) 0 ;
  char *arg2 = (char *) 0 ;

  arg1 = *(Arguments **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  {
    if (arg2) {
      arg1->_event = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->_event, (const char *)arg2);
    } else {
      arg1->_event = 0;
    }
  }

  free(arg2);
}


_gostring_ _wrap_Arguments_Event_get_arguments_f59005541e345fc4(Arguments *_swig_go_0) {
  Arguments *arg1 = (Arguments *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;

  arg1 = *(Arguments **)&_swig_go_0;

  result = (char *) ((arg1)->_event);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0);
  return _swig_go_result;
}


void _wrap_Arguments_Timeout_set_arguments_f59005541e345fc4(Arguments *_swig_go_0, intgo _swig_go_1) {
  Arguments *arg1 = (Arguments *) 0 ;
  int arg2 ;

  arg1 = *(Arguments **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->_timeout = arg2;

}


intgo _wrap_Arguments_Timeout_get_arguments_f59005541e345fc4(Arguments *_swig_go_0) {
  Arguments *arg1 = (Arguments *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(Arguments **)&_swig_go_0;

  result = (int) ((arg1)->_timeout);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Arguments_Interval_set_arguments_f59005541e345fc4(Arguments *_swig_go_0, long long _swig_go_1) {
  Arguments *arg1 = (Arguments *) 0 ;
  long arg2 ;

  arg1 = *(Arguments **)&_swig_go_0;
  arg2 = (long)_swig_go_1;

  if (arg1) (arg1)->_interval = arg2;

}


long long _wrap_Arguments_Interval_get_arguments_f59005541e345fc4(Arguments *_swig_go_0) {
  Arguments *arg1 = (Arguments *) 0 ;
  long result;
  long long _swig_go_result;

  arg1 = *(Arguments **)&_swig_go_0;

  result = (long) ((arg1)->_interval);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Arguments_Alloc_set_arguments_f59005541e345fc4(Arguments *_swig_go_0, long long _swig_go_1) {
  Arguments *arg1 = (Arguments *) 0 ;
  long arg2 ;

  arg1 = *(Arguments **)&_swig_go_0;
  arg2 = (long)_swig_go_1;

  if (arg1) (arg1)->_alloc = arg2;

}


long long _wrap_Arguments_Alloc_get_arguments_f59005541e345fc4(Arguments *_swig_go_0) {
  Arguments *arg1 = (Arguments *) 0 ;
  long result;
  long long _swig_go_result;

  arg1 = *(Arguments **)&_swig_go_0;

  result = (long) ((arg1)->_alloc);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Arguments_Lock_set_arguments_f59005541e345fc4(Arguments *_swig_go_0, long long _swig_go_1) {
  Arguments *arg1 = (Arguments *) 0 ;
  long arg2 ;

  arg1 = *(Arguments **)&_swig_go_0;
  arg2 = (long)_swig_go_1;

  if (arg1) (arg1)->_lock = arg2;

}


long long _wrap_Arguments_Lock_get_arguments_f59005541e345fc4(Arguments *_swig_go_0) {
  Arguments *arg1 = (Arguments *) 0 ;
  long result;
  long long _swig_go_result;

  arg1 = *(Arguments **)&_swig_go_0;

  result = (long) ((arg1)->_lock);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Arguments_Jstackdepth_set_arguments_f59005541e345fc4(Arguments *_swig_go_0, intgo _swig_go_1) {
  Arguments *arg1 = (Arguments *) 0 ;
  int arg2 ;

  arg1 = *(Arguments **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->_jstackdepth = arg2;

}


intgo _wrap_Arguments_Jstackdepth_get_arguments_f59005541e345fc4(Arguments *_swig_go_0) {
  Arguments *arg1 = (Arguments *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(Arguments **)&_swig_go_0;

  result = (int) ((arg1)->_jstackdepth);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Arguments_SafeMode_set_arguments_f59005541e345fc4(Arguments *_swig_go_0, intgo _swig_go_1) {
  Arguments *arg1 = (Arguments *) 0 ;
  int arg2 ;

  arg1 = *(Arguments **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->_safe_mode = arg2;

}


intgo _wrap_Arguments_SafeMode_get_arguments_f59005541e345fc4(Arguments *_swig_go_0) {
  Arguments *arg1 = (Arguments *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(Arguments **)&_swig_go_0;

  result = (int) ((arg1)->_safe_mode);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Arguments_File_set_arguments_f59005541e345fc4(Arguments *_swig_go_0, _gostring_ _swig_go_1) {
  Arguments *arg1 = (Arguments *) 0 ;
  char *arg2 = (char *) 0 ;

  arg1 = *(Arguments **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  {
    if (arg2) {
      arg1->_file = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->_file, (const char *)arg2);
    } else {
      arg1->_file = 0;
    }
  }

  free(arg2);
}


_gostring_ _wrap_Arguments_File_get_arguments_f59005541e345fc4(Arguments *_swig_go_0) {
  Arguments *arg1 = (Arguments *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;

  arg1 = *(Arguments **)&_swig_go_0;

  result = (char *) ((arg1)->_file);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0);
  return _swig_go_result;
}


void _wrap_Arguments_Log_set_arguments_f59005541e345fc4(Arguments *_swig_go_0, _gostring_ _swig_go_1) {
  Arguments *arg1 = (Arguments *) 0 ;
  char *arg2 = (char *) 0 ;

  arg1 = *(Arguments **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  {
    if (arg2) {
      arg1->_log = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->_log, (const char *)arg2);
    } else {
      arg1->_log = 0;
    }
  }

  free(arg2);
}


_gostring_ _wrap_Arguments_Log_get_arguments_f59005541e345fc4(Arguments *_swig_go_0) {
  Arguments *arg1 = (Arguments *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;

  arg1 = *(Arguments **)&_swig_go_0;

  result = (char *) ((arg1)->_log);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0);
  return _swig_go_result;
}


void _wrap_Arguments_Loglevel_set_arguments_f59005541e345fc4(Arguments *_swig_go_0, _gostring_ _swig_go_1) {
  Arguments *arg1 = (Arguments *) 0 ;
  char *arg2 = (char *) 0 ;

  arg1 = *(Arguments **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  {
    if (arg2) {
      arg1->_loglevel = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->_loglevel, (const char *)arg2);
    } else {
      arg1->_loglevel = 0;
    }
  }

  free(arg2);
}


_gostring_ _wrap_Arguments_Loglevel_get_arguments_f59005541e345fc4(Arguments *_swig_go_0) {
  Arguments *arg1 = (Arguments *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;

  arg1 = *(Arguments **)&_swig_go_0;

  result = (char *) ((arg1)->_loglevel);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0);
  return _swig_go_result;
}


void _wrap_Arguments_UnknownArg_set_arguments_f59005541e345fc4(Arguments *_swig_go_0, _gostring_ _swig_go_1) {
  Arguments *arg1 = (Arguments *) 0 ;
  char *arg2 = (char *) 0 ;

  arg1 = *(Arguments **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  {
    if (arg2) {
      arg1->_unknown_arg = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->_unknown_arg, (const char *)arg2);
    } else {
      arg1->_unknown_arg = 0;
    }
  }

  free(arg2);
}


_gostring_ _wrap_Arguments_UnknownArg_get_arguments_f59005541e345fc4(Arguments *_swig_go_0) {
  Arguments *arg1 = (Arguments *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;

  arg1 = *(Arguments **)&_swig_go_0;

  result = (char *) ((arg1)->_unknown_arg);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0);
  return _swig_go_result;
}


void _wrap_Arguments_Server_set_arguments_f59005541e345fc4(Arguments *_swig_go_0, _gostring_ _swig_go_1) {
  Arguments *arg1 = (Arguments *) 0 ;
  char *arg2 = (char *) 0 ;

  arg1 = *(Arguments **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  {
    if (arg2) {
      arg1->_server = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->_server, (const char *)arg2);
    } else {
      arg1->_server = 0;
    }
  }

  free(arg2);
}


_gostring_ _wrap_Arguments_Server_get_arguments_f59005541e345fc4(Arguments *_swig_go_0) {
  Arguments *arg1 = (Arguments *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;

  arg1 = *(Arguments **)&_swig_go_0;

  result = (char *) ((arg1)->_server);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0);
  return _swig_go_result;
}


void _wrap_Arguments_Filter_set_arguments_f59005541e345fc4(Arguments *_swig_go_0, _gostring_ _swig_go_1) {
  Arguments *arg1 = (Arguments *) 0 ;
  char *arg2 = (char *) 0 ;

  arg1 = *(Arguments **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  {
    if (arg2) {
      arg1->_filter = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->_filter, (const char *)arg2);
    } else {
      arg1->_filter = 0;
    }
  }

  free(arg2);
}


_gostring_ _wrap_Arguments_Filter_get_arguments_f59005541e345fc4(Arguments *_swig_go_0) {
  Arguments *arg1 = (Arguments *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;

  arg1 = *(Arguments **)&_swig_go_0;

  result = (char *) ((arg1)->_filter);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0);
  return _swig_go_result;
}


void _wrap_Arguments_Include_set_arguments_f59005541e345fc4(Arguments *_swig_go_0, intgo _swig_go_1) {
  Arguments *arg1 = (Arguments *) 0 ;
  int arg2 ;

  arg1 = *(Arguments **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->_include = arg2;

}


intgo _wrap_Arguments_Include_get_arguments_f59005541e345fc4(Arguments *_swig_go_0) {
  Arguments *arg1 = (Arguments *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(Arguments **)&_swig_go_0;

  result = (int) ((arg1)->_include);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Arguments_Exclude_set_arguments_f59005541e345fc4(Arguments *_swig_go_0, intgo _swig_go_1) {
  Arguments *arg1 = (Arguments *) 0 ;
  int arg2 ;

  arg1 = *(Arguments **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->_exclude = arg2;

}


intgo _wrap_Arguments_Exclude_get_arguments_f59005541e345fc4(Arguments *_swig_go_0) {
  Arguments *arg1 = (Arguments *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(Arguments **)&_swig_go_0;

  result = (int) ((arg1)->_exclude);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Arguments_Mcache_set_arguments_f59005541e345fc4(Arguments *_swig_go_0, char _swig_go_1) {
  Arguments *arg1 = (Arguments *) 0 ;
  unsigned char arg2 ;

  arg1 = *(Arguments **)&_swig_go_0;
  arg2 = (unsigned char)_swig_go_1;

  if (arg1) (arg1)->_mcache = arg2;

}


char _wrap_Arguments_Mcache_get_arguments_f59005541e345fc4(Arguments *_swig_go_0) {
  Arguments *arg1 = (Arguments *) 0 ;
  unsigned char result;
  char _swig_go_result;

  arg1 = *(Arguments **)&_swig_go_0;

  result = (unsigned char) ((arg1)->_mcache);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Arguments_Loop_set_arguments_f59005541e345fc4(Arguments *_swig_go_0, bool _swig_go_1) {
  Arguments *arg1 = (Arguments *) 0 ;
  bool arg2 ;

  arg1 = *(Arguments **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->_loop = arg2;

}


bool _wrap_Arguments_Loop_get_arguments_f59005541e345fc4(Arguments *_swig_go_0) {
  Arguments *arg1 = (Arguments *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(Arguments **)&_swig_go_0;

  result = (bool) ((arg1)->_loop);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Arguments_Threads_set_arguments_f59005541e345fc4(Arguments *_swig_go_0, bool _swig_go_1) {
  Arguments *arg1 = (Arguments *) 0 ;
  bool arg2 ;

  arg1 = *(Arguments **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->_threads = arg2;

}


bool _wrap_Arguments_Threads_get_arguments_f59005541e345fc4(Arguments *_swig_go_0) {
  Arguments *arg1 = (Arguments *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(Arguments **)&_swig_go_0;

  result = (bool) ((arg1)->_threads);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Arguments_Sched_set_arguments_f59005541e345fc4(Arguments *_swig_go_0, bool _swig_go_1) {
  Arguments *arg1 = (Arguments *) 0 ;
  bool arg2 ;

  arg1 = *(Arguments **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->_sched = arg2;

}


bool _wrap_Arguments_Sched_get_arguments_f59005541e345fc4(Arguments *_swig_go_0) {
  Arguments *arg1 = (Arguments *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(Arguments **)&_swig_go_0;

  result = (bool) ((arg1)->_sched);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Arguments_Live_set_arguments_f59005541e345fc4(Arguments *_swig_go_0, bool _swig_go_1) {
  Arguments *arg1 = (Arguments *) 0 ;
  bool arg2 ;

  arg1 = *(Arguments **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->_live = arg2;

}


bool _wrap_Arguments_Live_get_arguments_f59005541e345fc4(Arguments *_swig_go_0) {
  Arguments *arg1 = (Arguments *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(Arguments **)&_swig_go_0;

  result = (bool) ((arg1)->_live);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Arguments_Fdtransfer_set_arguments_f59005541e345fc4(Arguments *_swig_go_0, bool _swig_go_1) {
  Arguments *arg1 = (Arguments *) 0 ;
  bool arg2 ;

  arg1 = *(Arguments **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->_fdtransfer = arg2;

}


bool _wrap_Arguments_Fdtransfer_get_arguments_f59005541e345fc4(Arguments *_swig_go_0) {
  Arguments *arg1 = (Arguments *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(Arguments **)&_swig_go_0;

  result = (bool) ((arg1)->_fdtransfer);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Arguments_FdtransferPath_set_arguments_f59005541e345fc4(Arguments *_swig_go_0, _gostring_ _swig_go_1) {
  Arguments *arg1 = (Arguments *) 0 ;
  char *arg2 = (char *) 0 ;

  arg1 = *(Arguments **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  {
    if (arg2) {
      arg1->_fdtransfer_path = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->_fdtransfer_path, (const char *)arg2);
    } else {
      arg1->_fdtransfer_path = 0;
    }
  }

  free(arg2);
}


_gostring_ _wrap_Arguments_FdtransferPath_get_arguments_f59005541e345fc4(Arguments *_swig_go_0) {
  Arguments *arg1 = (Arguments *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;

  arg1 = *(Arguments **)&_swig_go_0;

  result = (char *) ((arg1)->_fdtransfer_path);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0);
  return _swig_go_result;
}


void _wrap_Arguments_Style_set_arguments_f59005541e345fc4(Arguments *_swig_go_0, intgo _swig_go_1) {
  Arguments *arg1 = (Arguments *) 0 ;
  int arg2 ;

  arg1 = *(Arguments **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->_style = arg2;

}


intgo _wrap_Arguments_Style_get_arguments_f59005541e345fc4(Arguments *_swig_go_0) {
  Arguments *arg1 = (Arguments *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(Arguments **)&_swig_go_0;

  result = (int) ((arg1)->_style);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Arguments_Cstack_set_arguments_f59005541e345fc4(Arguments *_swig_go_0, intgo _swig_go_1) {
  Arguments *arg1 = (Arguments *) 0 ;
  CStack arg2 ;

  arg1 = *(Arguments **)&_swig_go_0;
  arg2 = (CStack)_swig_go_1;

  if (arg1) (arg1)->_cstack = arg2;

}


intgo _wrap_Arguments_Cstack_get_arguments_f59005541e345fc4(Arguments *_swig_go_0) {
  Arguments *arg1 = (Arguments *) 0 ;
  CStack result;
  intgo _swig_go_result;

  arg1 = *(Arguments **)&_swig_go_0;

  result = (CStack) ((arg1)->_cstack);
  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


void _wrap_Arguments_Output_set_arguments_f59005541e345fc4(Arguments *_swig_go_0, intgo _swig_go_1) {
  Arguments *arg1 = (Arguments *) 0 ;
  Output arg2 ;

  arg1 = *(Arguments **)&_swig_go_0;
  arg2 = (Output)_swig_go_1;

  if (arg1) (arg1)->_output = arg2;

}


intgo _wrap_Arguments_Output_get_arguments_f59005541e345fc4(Arguments *_swig_go_0) {
  Arguments *arg1 = (Arguments *) 0 ;
  Output result;
  intgo _swig_go_result;

  arg1 = *(Arguments **)&_swig_go_0;

  result = (Output) ((arg1)->_output);
  _swig_go_result = (intgo)result;
  return _swig_go_result;
}


void _wrap_Arguments_ChunkSize_set_arguments_f59005541e345fc4(Arguments *_swig_go_0, long long _swig_go_1) {
  Arguments *arg1 = (Arguments *) 0 ;
  long arg2 ;

  arg1 = *(Arguments **)&_swig_go_0;
  arg2 = (long)_swig_go_1;

  if (arg1) (arg1)->_chunk_size = arg2;

}


long long _wrap_Arguments_ChunkSize_get_arguments_f59005541e345fc4(Arguments *_swig_go_0) {
  Arguments *arg1 = (Arguments *) 0 ;
  long result;
  long long _swig_go_result;

  arg1 = *(Arguments **)&_swig_go_0;

  result = (long) ((arg1)->_chunk_size);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Arguments_ChunkTime_set_arguments_f59005541e345fc4(Arguments *_swig_go_0, long long _swig_go_1) {
  Arguments *arg1 = (Arguments *) 0 ;
  long arg2 ;

  arg1 = *(Arguments **)&_swig_go_0;
  arg2 = (long)_swig_go_1;

  if (arg1) (arg1)->_chunk_time = arg2;

}


long long _wrap_Arguments_ChunkTime_get_arguments_f59005541e345fc4(Arguments *_swig_go_0) {
  Arguments *arg1 = (Arguments *) 0 ;
  long result;
  long long _swig_go_result;

  arg1 = *(Arguments **)&_swig_go_0;

  result = (long) ((arg1)->_chunk_time);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Arguments_JfrSync_set_arguments_f59005541e345fc4(Arguments *_swig_go_0, _gostring_ _swig_go_1) {
  Arguments *arg1 = (Arguments *) 0 ;
  char *arg2 = (char *) 0 ;

  arg1 = *(Arguments **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  {
    if (arg2) {
      arg1->_jfr_sync = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->_jfr_sync, (const char *)arg2);
    } else {
      arg1->_jfr_sync = 0;
    }
  }

  free(arg2);
}


_gostring_ _wrap_Arguments_JfrSync_get_arguments_f59005541e345fc4(Arguments *_swig_go_0) {
  Arguments *arg1 = (Arguments *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;

  arg1 = *(Arguments **)&_swig_go_0;

  result = (char *) ((arg1)->_jfr_sync);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0);
  return _swig_go_result;
}


void _wrap_Arguments_JfrOptions_set_arguments_f59005541e345fc4(Arguments *_swig_go_0, intgo _swig_go_1) {
  Arguments *arg1 = (Arguments *) 0 ;
  int arg2 ;

  arg1 = *(Arguments **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->_jfr_options = arg2;

}


intgo _wrap_Arguments_JfrOptions_get_arguments_f59005541e345fc4(Arguments *_swig_go_0) {
  Arguments *arg1 = (Arguments *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(Arguments **)&_swig_go_0;

  result = (int) ((arg1)->_jfr_options);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Arguments_DumpTraces_set_arguments_f59005541e345fc4(Arguments *_swig_go_0, intgo _swig_go_1) {
  Arguments *arg1 = (Arguments *) 0 ;
  int arg2 ;

  arg1 = *(Arguments **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->_dump_traces = arg2;

}


intgo _wrap_Arguments_DumpTraces_get_arguments_f59005541e345fc4(Arguments *_swig_go_0) {
  Arguments *arg1 = (Arguments *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(Arguments **)&_swig_go_0;

  result = (int) ((arg1)->_dump_traces);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Arguments_DumpFlat_set_arguments_f59005541e345fc4(Arguments *_swig_go_0, intgo _swig_go_1) {
  Arguments *arg1 = (Arguments *) 0 ;
  int arg2 ;

  arg1 = *(Arguments **)&_swig_go_0;
  arg2 = (int)_swig_go_1;

  if (arg1) (arg1)->_dump_flat = arg2;

}


intgo _wrap_Arguments_DumpFlat_get_arguments_f59005541e345fc4(Arguments *_swig_go_0) {
  Arguments *arg1 = (Arguments *) 0 ;
  int result;
  intgo _swig_go_result;

  arg1 = *(Arguments **)&_swig_go_0;

  result = (int) ((arg1)->_dump_flat);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Arguments_FileNum_set_arguments_f59005541e345fc4(Arguments *_swig_go_0, intgo _swig_go_1) {
  Arguments *arg1 = (Arguments *) 0 ;
  unsigned int arg2 ;

  arg1 = *(Arguments **)&_swig_go_0;
  arg2 = (unsigned int)_swig_go_1;

  if (arg1) (arg1)->_file_num = arg2;

}


intgo _wrap_Arguments_FileNum_get_arguments_f59005541e345fc4(Arguments *_swig_go_0) {
  Arguments *arg1 = (Arguments *) 0 ;
  unsigned int result;
  intgo _swig_go_result;

  arg1 = *(Arguments **)&_swig_go_0;

  result = (unsigned int) ((arg1)->_file_num);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Arguments_Begin_set_arguments_f59005541e345fc4(Arguments *_swig_go_0, _gostring_ _swig_go_1) {
  Arguments *arg1 = (Arguments *) 0 ;
  char *arg2 = (char *) 0 ;

  arg1 = *(Arguments **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  {
    if (arg2) {
      arg1->_begin = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->_begin, (const char *)arg2);
    } else {
      arg1->_begin = 0;
    }
  }

  free(arg2);
}


_gostring_ _wrap_Arguments_Begin_get_arguments_f59005541e345fc4(Arguments *_swig_go_0) {
  Arguments *arg1 = (Arguments *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;

  arg1 = *(Arguments **)&_swig_go_0;

  result = (char *) ((arg1)->_begin);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0);
  return _swig_go_result;
}


void _wrap_Arguments_End_set_arguments_f59005541e345fc4(Arguments *_swig_go_0, _gostring_ _swig_go_1) {
  Arguments *arg1 = (Arguments *) 0 ;
  char *arg2 = (char *) 0 ;

  arg1 = *(Arguments **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  {
    if (arg2) {
      arg1->_end = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->_end, (const char *)arg2);
    } else {
      arg1->_end = 0;
    }
  }

  free(arg2);
}


_gostring_ _wrap_Arguments_End_get_arguments_f59005541e345fc4(Arguments *_swig_go_0) {
  Arguments *arg1 = (Arguments *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;

  arg1 = *(Arguments **)&_swig_go_0;

  result = (char *) ((arg1)->_end);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0);
  return _swig_go_result;
}


void _wrap_Arguments_Title_set_arguments_f59005541e345fc4(Arguments *_swig_go_0, _gostring_ _swig_go_1) {
  Arguments *arg1 = (Arguments *) 0 ;
  char *arg2 = (char *) 0 ;

  arg1 = *(Arguments **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  {
    if (arg2) {
      arg1->_title = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->_title, (const char *)arg2);
    } else {
      arg1->_title = 0;
    }
  }

  free(arg2);
}


_gostring_ _wrap_Arguments_Title_get_arguments_f59005541e345fc4(Arguments *_swig_go_0) {
  Arguments *arg1 = (Arguments *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;

  arg1 = *(Arguments **)&_swig_go_0;

  result = (char *) ((arg1)->_title);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0);
  return _swig_go_result;
}


void _wrap_Arguments_Minwidth_set_arguments_f59005541e345fc4(Arguments *_swig_go_0, double _swig_go_1) {
  Arguments *arg1 = (Arguments *) 0 ;
  double arg2 ;

  arg1 = *(Arguments **)&_swig_go_0;
  arg2 = (double)_swig_go_1;

  if (arg1) (arg1)->_minwidth = arg2;

}


double _wrap_Arguments_Minwidth_get_arguments_f59005541e345fc4(Arguments *_swig_go_0) {
  Arguments *arg1 = (Arguments *) 0 ;
  double result;
  double _swig_go_result;

  arg1 = *(Arguments **)&_swig_go_0;

  result = (double) ((arg1)->_minwidth);
  _swig_go_result = result;
  return _swig_go_result;
}


void _wrap_Arguments_Reverse_set_arguments_f59005541e345fc4(Arguments *_swig_go_0, bool _swig_go_1) {
  Arguments *arg1 = (Arguments *) 0 ;
  bool arg2 ;

  arg1 = *(Arguments **)&_swig_go_0;
  arg2 = (bool)_swig_go_1;

  if (arg1) (arg1)->_reverse = arg2;

}


bool _wrap_Arguments_Reverse_get_arguments_f59005541e345fc4(Arguments *_swig_go_0) {
  Arguments *arg1 = (Arguments *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(Arguments **)&_swig_go_0;

  result = (bool) ((arg1)->_reverse);
  _swig_go_result = result;
  return _swig_go_result;
}


Arguments *_wrap_new_Arguments__SWIG_0_arguments_f59005541e345fc4(bool _swig_go_0) {
  bool arg1 ;
  Arguments *result = 0 ;
  Arguments *_swig_go_result;

  arg1 = (bool)_swig_go_0;

  result = (Arguments *)new Arguments(arg1);
  *(Arguments **)&_swig_go_result = (Arguments *)result;
  return _swig_go_result;
}


Arguments *_wrap_new_Arguments__SWIG_1_arguments_f59005541e345fc4() {
  Arguments *result = 0 ;
  Arguments *_swig_go_result;


  result = (Arguments *)new Arguments();
  *(Arguments **)&_swig_go_result = (Arguments *)result;
  return _swig_go_result;
}


void _wrap_delete_Arguments_arguments_f59005541e345fc4(Arguments *_swig_go_0) {
  Arguments *arg1 = (Arguments *) 0 ;

  arg1 = *(Arguments **)&_swig_go_0;

  delete arg1;

}


void _wrap_Arguments_Save_arguments_f59005541e345fc4(Arguments *_swig_go_0, Arguments *_swig_go_1) {
  Arguments *arg1 = (Arguments *) 0 ;
  Arguments *arg2 = 0 ;

  arg1 = *(Arguments **)&_swig_go_0;
  arg2 = *(Arguments **)&_swig_go_1;

  (arg1)->save(*arg2);

}


Error *_wrap_Arguments_Parse_arguments_f59005541e345fc4(Arguments *_swig_go_0, _gostring_ _swig_go_1) {
  Arguments *arg1 = (Arguments *) 0 ;
  char *arg2 = (char *) 0 ;
  SwigValueWrapper< Error > result;
  Error *_swig_go_result;

  arg1 = *(Arguments **)&_swig_go_0;

  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';


  result = (arg1)->parse((char const *)arg2);
  *(Error **)&_swig_go_result = new Error(result);
  free(arg2);
  return _swig_go_result;
}


_gostring_ _wrap_Arguments_newfile_arguments_f59005541e345fc4(Arguments *_swig_go_0) {
  Arguments *arg1 = (Arguments *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;

  arg1 = *(Arguments **)&_swig_go_0;

  result = (char *)(arg1)->file();
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0);
  return _swig_go_result;
}


bool _wrap_Arguments_HasOutputFile_arguments_f59005541e345fc4(Arguments *_swig_go_0) {
  Arguments *arg1 = (Arguments *) 0 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(Arguments **)&_swig_go_0;

  result = (bool)((Arguments const *)arg1)->hasOutputFile();
  _swig_go_result = result;
  return _swig_go_result;
}


bool _wrap_Arguments_HasOption_arguments_f59005541e345fc4(Arguments *_swig_go_0, intgo _swig_go_1) {
  Arguments *arg1 = (Arguments *) 0 ;
  JfrOption arg2 ;
  bool result;
  bool _swig_go_result;

  arg1 = *(Arguments **)&_swig_go_0;
  arg2 = (JfrOption)_swig_go_1;

  result = (bool)((Arguments const *)arg1)->hasOption(arg2);
  _swig_go_result = result;
  return _swig_go_result;
}


#ifdef __cplusplus
}
#endif
