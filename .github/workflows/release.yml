name: Release

on:
  push:
    tags:
      - v*

permissions:
  contents: write

env:
  # renovate: datasource=docker depName=golang
  GO_VERSION: 1.18.3

jobs:
  goreleaser:
    name: Go binary build and release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # tag=v3.0.2
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@b22fbbc2921299758641fab08929b4ac52b32923 # tag=v3.2.0
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Rust
        run: rustup show

      - name: Rust Cache
        uses: Swatinem/rust-cache@cb2cf0cc7c5198d3364b9630e2c3d457f160790c # tag=v1.4.0

      - name: Install LLVM and libbpf dependencies
        run: |
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          echo -e "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-14 main\n" | sudo tee /etc/apt/sources.list.d/llvm.list
          sudo apt-get update -y
          sudo apt-get install -yq llvm-14-dev libclang-14-dev libelf-dev

      - name: Run eBPF toolchain setup
        run: |
          make -C bpf setup
          cd bpf && cargo check

      - name: Initialize and update libbpf submodule
        run: git submodule init && git submodule update

      - name: Set Env
        run: echo "BPF_OUT=$(pwd)/dist" >> $GITHUB_ENV

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@68acf3b1adf004ac9c2f0a4259e85c5f66e99bef # tag=v3
        if: startsWith(github.ref, 'refs/tags/')
        with:
          distribution: goreleaser
          version: latest
          args: release --rm-dist
        env:
          # BPF_OUT: ${{ env.GITHUB_WORKSPACE }}/dist
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  manifests:
    name: Manifests generate and release
    runs-on: ubuntu-latest
    needs: goreleaser
    steps:
      - name: Check out the code
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # tag=v3.0.2

      - name: Set up Go
        uses: actions/setup-go@b22fbbc2921299758641fab08929b4ac52b32923 # tag=v3.2.0
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Jsonnet
        run: ./env.sh

      - name: Generate
        run: cd deploy && make --always-make vendor manifests

      - name: Prepare
        run: |
          tar -zcvf deploy/manifests.tar.gz deploy/manifests
          cp deploy/manifests/kubernetes/manifest.yaml deploy/kubernetes-manifest.yaml
          cp deploy/manifests/openshift/manifest.yaml deploy/openshift-manifest.yaml

      - name: Release
        uses: softprops/action-gh-release@1e07f4398721186383de40550babbdf2b84acfc5 # tag=v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            deploy/manifests.tar.gz
            deploy/kubernetes-manifest.yaml
            deploy/openshift-manifest.yaml

  publish-docs:
    name: Publish Docs
    runs-on: ubuntu-latest
    needs: manifests
    steps:
      - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # tag=v3.0.2

      - name: Publish Netlify
        uses: netlify/actions/build@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      - name: Publish Vercel
        run: |
          curl -X POST "https://api.vercel.com/v1/integrations/deploy/${{ secrets.VERCEL_WEBHOOK }}"

  container:
    name: Container build and release
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      packages: write
      contents: read
    steps:
      - name: Install cosign
        uses: sigstore/cosign-installer@7e0881f8fe90b25e305bbf0309761e9314607e25 # tag=v2.4.0

      - name: Install crane
        if: ${{ github.event_name != 'pull_request' }}
        uses: imjasonh/setup-crane@5146f708a817ea23476677995bf2133943b9be0b # tag=v0.1

      - name: Check out code into the Go module directory
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # tag=v3.0.2

      - name: Get branch name
        shell: bash
        run: echo "GITHUB_BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV

      - name: Build container
        run: make container

      - name: Login to registry
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          echo "${{ secrets.PERSONAL_ACCESS_TOKEN }}" | podman login -u parca-dev --password-stdin ghcr.io

      - name: Push container
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          make push-container

      - name: Sign container
        env:
          COSIGN_EXPERIMENTAL: true
        run: |
          make sign-container
