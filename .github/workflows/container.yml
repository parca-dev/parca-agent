name: Container

on:
  push:
    branches:
    - main
    - release-*
  pull_request:
    branches:
    - main
    - release-*

env:
  # renovate: datasource=github-releases depName=kubernetes/minikube extractVersion=^v(?<version>.+)$
  MINIKUBE_VERSION: 1.28.0
  # renovate: datasource=github-tags depName=NixOS/nix
  NIX_VERSION: 2.13.2

jobs:
  skip-check:
    name: Skip check
    continue-on-error: true
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip-check.outputs.should_skip }}
    permissions:
      actions: write
      contents: read
    steps:
      - id: skip-check
        uses: fkirc/skip-duplicate-actions@12aca0a884f6137d619d6a8a09fcc3406ced5281 # v5.3.0
        with:
          do_not_skip: '["schedule", "workflow_dispatch"]'
          paths: |-
            [
              "**.go",
              "**.nix",
              ".dockerignore",
              ".github/workflows/container.yml",
              ".go-version",
              "Makefile",
              "bpf/**",
              "deploy/**",
              "e2e/**",
              "flake.lock",
              "go.mod",
              "go.sum",
              "VERSION"
            ]
          skip_after_successful_duplicate: false

  build-and-push-container:
    name: Container build and push
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      packages: write
      contents: read
    steps:
      - name: Check out code
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
        with:
          fetch-depth: 0

      - name: Set up Nix
        uses: cachix/install-nix-action@5c11eae19dba042788936d4f1c9685fdd814ac49 # v19
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
          install_url: https://releases.nixos.org/nix/nix-${{ env.NIX_VERSION }}/install

      - name: Set up Cachix
        uses: cachix/cachix-action@6a9a34cdd93d0ae4b4b59fd678660efb08109f2f # v12
        with:
          name: parca-agent
          signingKey: ${{ secrets.CACHIX_SIGNING_KEY }}
          skipPush: ${{ github.event_name == 'pull_request' }}

      - name: Set image name
        run: |
          IMAGE_TAG="$(make version)"
          printf 'IMAGE=ghcr.io/parca-dev/parca-agent:%s\n' "${IMAGE_TAG}" >> "${GITHUB_ENV}"

      - name: Build container amd64 image
        id: image-amd64
        run: |
          IMAGE_AMD64="$(nix build --print-build-logs --print-out-paths .#docker-image)"
          printf 'path=%s\n' "${IMAGE_AMD64}" >> "${GITHUB_OUTPUT}"

      - name: Build container arm64 image
        id: image-arm64
        run: |
          IMAGE_AMD64="$(nix build --print-build-logs --print-out-paths .#docker-image-aarch64-linux)"
          printf 'path=%s\n' "${IMAGE_AMD64}" >> "${GITHUB_OUTPUT}"

      # If support is added to Skopeo, we could integrate it with Nix build
      # https://github.com/containers/skopeo/issues/1136
      - name: Create container image manifest
        run: |
          podman manifest create "${IMAGE}"
          echo ">>> Adding amd64 image to manifest..."
          podman manifest add "${IMAGE}" "docker-archive:${IMAGE_AMD64}"
          echo ">>> Adding arm64 image to manifest..."
          podman manifest add "${IMAGE}" "docker-archive:${IMAGE_ARM64}"
        env:
          IMAGE_AMD64: ${{ steps.image-amd64.outputs.path }}
          IMAGE_ARM64: ${{ steps.image-arm64.outputs.path }}

      - name: Check images are created
        run: podman manifest inspect "${IMAGE}" | jq '(.manifests|length == 2) or halt_error'

      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@9becc617647dfa20ae7b1151972e9b3a2c338a2b # tag=v2.8.1

      - name: Login to registry
        if: github.event_name != 'pull_request'
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | podman login -u parca-dev --password-stdin ghcr.io
          echo "${{ secrets.QUAY_PASSWORD }}" | cosign login -u "${{ secrets.QUAY_USERNAME }}" --password-stdin quay.io

      - name: Install crane
        if: github.event_name != 'pull_request'
        uses: imjasonh/setup-crane@00c9e93efa4e1138c9a7a5c594acd6c75a2fbf0c # v0.3

      - name: Push and sign container (when merged)
        if: github.event_name != 'pull_request'
        env:
          COSIGN_EXPERIMENTAL: true
        run: |
          make push-container
          make sign-container
          make push-signed-quay-container

  run-end-to-end-tests:
    name: run end-to-end tests
    runs-on: ubuntu-latest
    needs: build-and-push-container
    permissions:
      contents: read
    steps:
      - name: Check out the code
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
        with:
          fetch-depth: 0

      - name: Set up Nix
        uses: cachix/install-nix-action@5c11eae19dba042788936d4f1c9685fdd814ac49 # v19
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
          install_url: https://releases.nixos.org/nix/nix-${{ env.NIX_VERSION }}/install

      - name: Set up Cachix
        uses: cachix/cachix-action@6a9a34cdd93d0ae4b4b59fd678660efb08109f2f # v12
        with:
          name: parca-agent
          signingKey: ${{ secrets.CACHIX_SIGNING_KEY }}
          skipPush: ${{ github.event_name == 'pull_request' }}

      - name: Set up Go
        uses: actions/setup-go@6edd4406fa81c3da01a34fa6f6343087c207a568 # v3.5.0
        with:
          go-version-file: .go-version
          cache: true

      - name: Set up jsonnet
        run: ./env-jsonnet.sh

      - name: Set up Minikube
        uses: medyagh/setup-minikube@ab221dee176f8eabd8deddf849b5bf1d6244a6e8 # v0.0.11
        with:
          minikube-version: ${{ env.MINIKUBE_VERSION }}
          driver: none
          kubernetes-version: stable # Determined by Minikube version

      - name: Load container image
        run: |
          IMAGE_TAG="$(make version)"
          IMAGE="$(docker image load <"$(nix build --print-build-logs --print-out-paths .#docker-image)")"
          docker tag "${IMAGE#Loaded image: }" "ghcr.io/parca-dev/parca-agent:${IMAGE_TAG}"

      - name: Run e2e tests
        run: make actions-e2e E2E_KUBECONTEXT=minikube

      - name: Upload kubectl logs
        run: ./e2e/e2e-dump.sh

      # Uncomment the next two lines to use upterm to debug CI
      # Run `touch continue` from upterm session to close upterm
      # and finish this step
      # - name: Setup upterm session
      #   uses: lhotari/action-upterm@v1

      - name: Archive production artifacts
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
        if: ${{ always() }}
        with:
          name: kubectl e2e dump
          path: |
            ./tmp/e2e-dump
