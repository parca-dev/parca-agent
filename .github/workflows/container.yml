name: Container

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # renovate: datasource=go depName=github.com/goreleaser/goreleaser
  GORELEASER_VERSION: v1.11.4
  RUSTFLAGS: --deny warnings
  RUSTDOCFLAGS: --deny warnings

jobs:
  skip-check:
    name: Skip check
    continue-on-error: true
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip-check.outputs.should_skip }}
    permissions:
      actions: write
      contents: read
    steps:
      - id: skip-check
        uses: fkirc/skip-duplicate-actions@9d116fa7e55f295019cfab7e3ab72b478bcf7fdd # tag=v4.0.0
        with:
          do_not_skip: '["schedule", "workflow_dispatch"]'
          paths: |-
            [
              "**.go",
              "**.rs",
              ".dockerignore",
              ".github/workflows/container.yml",
              ".go-version",
              "3rdparty",
              "Dockerfile*",
              "Makefile",
              "bpf/**/.cargo",
              "bpf/**/Cargo.*",
              "bpf/.cargo",
              "bpf/Cargo.*",
              "bpf/Makefile",
              "go.mod",
              "go.sum",
              "rust-toolchain.toml"
            ]
          skip_after_successful_duplicate: false

  build-dependencies:
    name: Build and download dependencies
    needs: skip-check
    if: ${{ needs.skip-check.outputs.should_skip != 'true' }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      packages: write
      contents: read
    steps:
      - name: Check out the code
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # tag=v3.0.2
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@268d8c0ca0432bb2cf416faae41297df9d262d7f # tag=v3.3.0
        with:
          go-version-file: .go-version

      - name: Set up Rust
        # Yes, oddly `rustup show` installs the toolchain (:
        # https://github.com/rust-lang/rustup/issues/2686
        run: rustup show

      - name: Rust cache
        uses: Swatinem/rust-cache@cb2cf0cc7c5198d3364b9630e2c3d457f160790c # tag=v1.4.0
        with:
          working-directory: ./bpf

      - name: Install LLVM (Aya, BPF dependency)
        run: |
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          echo -e "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-14 main\n" | sudo tee /etc/apt/sources.list.d/llvm.list
          sudo apt-get update -y
          sudo apt-get install -yq llvm-14-dev libclang-14-dev

      - name: Run eBPF toolchain setup
        run: |
          make -C bpf setup
          cd bpf && cargo check

      - name: Build BPF
        run: make bpf

      - uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8 # tag=v3.1.0
        with:
          name: ebpf-object-file-container
          path: pkg/profiler/cpu/cpu-profiler.bpf.o
          if-no-files-found: error

      - name: Validate
        uses: goreleaser/goreleaser-action@ff11ca24a9b39f2d36796d1fbd7a4e39c182630a # tag=v3.1.0
        with:
          distribution: goreleaser
          version: ${{ env.GORELEASER_VERSION }}
          args: check

  build-binaries:
    name: Build binaries using goreleaser
    runs-on: ubuntu-latest
    needs: build-dependencies
    container:
      image: docker.io/goreleaser/goreleaser-cross:v1.19.1
      options: --privileged
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Check out the code
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # tag=v3.0.2
        with:
          fetch-depth: 0

      - name: Set Tag
        run: |
          echo "goreleaser_current_tag=`git describe --match 'v*' --tags`" >> $GITHUB_ENV

      - name: Set up Go
        uses: actions/setup-go@268d8c0ca0432bb2cf416faae41297df9d262d7f # tag=v3.3.0
        with:
          go-version-file: .go-version
          cache: true

      - name: Initialize and update libbpf submodule
        run: git submodule init && git submodule update

      - name: Install libbpf dependencies
        run: |
          apt-get update -y
          apt-get install -yq lld libelf-dev zlib1g-dev libelf-dev:arm64 zlib1g-dev:arm64

      - name: Get branch name
        shell: bash
        run: echo "GITHUB_BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV

      - uses: actions/download-artifact@fb598a63ae348fa914e94cd0ff38f362e927b741 # tag=v3.0.0
        with:
          name: ebpf-object-file-container
          path: pkg/profiler/cpu/cpu-profiler.bpf.o

      - name: Run Goreleaser
        run: goreleaser release --rm-dist --skip-validate --skip-publish --snapshot --debug
        env:
          GORELEASER_CURRENT_TAG: "${{ env.goreleaser_current_tag }}"

      - name: Archive generated artifacts
        uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8 # tag=v3.1.0
        with:
          name: parca-agent-dist-container
          if-no-files-found: error
          path: |
            goreleaser/dist
            !goreleaser/dist/*.txt

  build-and-push-container:
    name: Container build and push (when merged)
    needs: build-binaries
    runs-on: ubuntu-latest
    container:
      # https://github.com/containers/podman/tree/main/contrib/podmanimage
      # Specifying SHA repeatedly fails:
      # @sha256:421ac576cebff98e90c531e7b9ce4482370ecc7cee59abc2341714031bfb5f43
      image: quay.io/containers/podman:v4.2.0
      options: >-
        --device /dev/fuse:rw
        --privileged
        --security-opt label=disable
        --security-opt seccomp=unconfined
    permissions:
      id-token: write
      packages: write
      contents: read
    steps:
      - name: Install dependencies
        run: dnf install --assumeyes --repo fedora git make jq

      - name: Check out code into the Go module directory
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # tag=v3.0.2

      - name: Set up Go
        uses: actions/setup-go@268d8c0ca0432bb2cf416faae41297df9d262d7f # tag=v3.3.0
        with:
          go-version-file: .go-version
          check-latest: true

      - uses: actions/download-artifact@fb598a63ae348fa914e94cd0ff38f362e927b741 # tag=v3.0.0
        with:
          name: parca-agent-dist-container
          path: goreleaser/dist

      - name: Build container
        run: make container

      - name: Check images are created
        run: podman images | grep 'ghcr.io/parca-dev/parca-agent'

      - name: Install cosign
        if: ${{ github.event_name != 'pull_request' }}
        uses: sigstore/cosign-installer@ced07f21fb1da67979f539bbc6304c16c0677e76 # tag=v2.7.0

      - name: Login to registry
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | podman login -u parca-dev --password-stdin ghcr.io
          echo "${{ secrets.QUAY_PASSWORD }}" | cosign login -u "${{ secrets.QUAY_USERNAME }}" --password-stdin quay.io

      - name: Install crane
        if: ${{ github.event_name != 'pull_request' }}
        uses: imjasonh/setup-crane@e82f1b9a8007d399333baba4d75915558e9fb6a4 # tag=v0.2

      - name: Push and sign container
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_EXPERIMENTAL: true
        run: |
          make push-container
          make sign-container
          make push-signed-quay-container
