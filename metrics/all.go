// Code generated from metrics.json. DO NOT EDIT.
// NOTE: metrics.json was copied from opentelemetry-ebpf.profiler.
// It should be kept in sync when upgrading versions.

package metrics

import (
	otelmetrics "github.com/open-telemetry/opentelemetry-ebpf-profiler/metrics"
)

const (
	MetricUnitNone         = 0
	MetricUnitPercent      = 1
	MetricUnitByte         = 2
	MetricUnitMicroseconds = 3
	MetricUnitMilliseconds = 4
	MetricUnitSeconds      = 5
)

const (
	MetricTypeGauge   = 0
	MetricTypeCounter = 1
)

var AllMetrics = map[otelmetrics.MetricID]Metric{
	otelmetrics.IDInvalid: {
		Desc:  "Leave out the 0 value. It's an indication of not explicitly initialized variables.",
		Field: "",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDCPUUsage: {
		Desc:  "CPU Usage: values are 0-100%",
		Field: "host.cpu.usage",
		Type:  MetricTypeGauge,
		Unit:  MetricUnitPercent,
	},
	otelmetrics.IDIOThroughput: {
		Desc:  "I/O Throughput: values are bytes/s",
		Field: "host.io.throughput",
		Type:  MetricTypeGauge,
		Unit:  MetricUnitByte,
	},
	otelmetrics.IDIODuration: {
		Desc:  "I/O Duration: values are 'weighted # of milliseconds doing I/O'",
		Field: "host.io.duration",
		Type:  MetricTypeGauge,
		Unit:  MetricUnitMilliseconds,
	},
	otelmetrics.IDAgentGoRoutines: {
		Desc:  "Absolute number of goroutines when the metric was collected.",
		Field: "agent.goroutines",
		Type:  MetricTypeGauge,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDAgentHeapAlloc: {
		Desc:  "Absolute number in bytes of allocated heap objects of the agent.",
		Field: "agent.heap.alloc",
		Type:  MetricTypeGauge,
		Unit:  MetricUnitByte,
	},
	otelmetrics.IDAgentUTime: {
		Desc:  "Difference to previous user CPU time of the agent in Milliseconds.",
		Field: "agent.time.cpu.user",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitMilliseconds,
	},
	otelmetrics.IDAgentSTime: {
		Desc:  "Difference to previous system CPU time of the agent in Milliseconds.",
		Field: "agent.time.cpu.sys",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitMilliseconds,
	},
	otelmetrics.IDUnwindCallInterpreter: {
		Desc:  "Number of calls to interpreter unwinding in dispatch_interpreters()",
		Field: "bpf.interpreter.calls",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindNativeAttempts: {
		Desc:  "Unwind attempts since the previous check",
		Field: "bpf.native.attempts",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindNativeFrames: {
		Desc:  "Unwound frames since the previous check",
		Field: "bpf.native.frames",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindErrStackLengthExceeded: {
		Desc:  "Number of times MAX_FRAME_UNWINDS has been exceeded in unwind_next_frame()",
		Field: "bpf.errors.stack_length_exceeded",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindNativeErrLookupTextSection: {
		Desc:  "Number of failed range searches within 20 steps in get_stack_delta()",
		Field: "bpf.native.errors.lookup_text_section",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindNativeErrLookupIterations: {
		Desc:  "Number of failures to get stack_unwind_info from big_stack_deltas in get_stack_delta()",
		Field: "bpf.native.errors.lookup_iterations",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindNativeErrLookupRange: {
		Desc:  "Number of failures to get stack_unwind_info from big_stack_deltas in get_stack_delta()",
		Field: "bpf.native.errors.lookup_range",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindNativeErrKernelAddress: {
		Desc:  "Number of kernel addresses passed to get_text_section()",
		Field: "bpf.native.errors.kernel_address",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindNativeErrWrongTextSection: {
		Desc:  "Number of failures to find the text section in get_text_section()",
		Field: "bpf.native.errors.wrong_text_section",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindErrZeroPC: {
		Desc:  "Number of failures due to PC == 0 in unwind_next_frame()",
		Field: "bpf.errors.zero_pc",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindPythonAttempts: {
		Desc:  "Number of attempted python unwinds",
		Field: "bpf.python.attempts",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindPythonFrames: {
		Desc:  "Number of unwound python frames",
		Field: "bpf.python.frames",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindPythonErrBadPyThreadStateCurrentAddr: {
		Desc:  "Number of failures to read from pyinfo->pyThreadStateCurrentAddr",
		Field: "bpf.python.errors.bad_py_thread_state_current_addr",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindPythonErrZeroThreadState: {
		Desc:  "Number of PyThreadState being 0x0",
		Field: "bpf.python.errors.zero_thread_state",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindErrBadTLSAddr: {
		Desc:  "Number of failures to read from the TLS",
		Field: "bpf.errors.bad_tls_addr",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindErrBadTPBaseAddr: {
		Desc:  "Number of failures to get the TLS base in tls_get_base()",
		Field: "bpf.errors.bad_tp_base_addr",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindPythonErrBadThreadStateFrameAddr: {
		Desc:  "Number of failures to read PyThreadState.frame in unwind_python()",
		Field: "bpf.python.errors.bad_thread_state_frame_addr",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindPythonZeroFrameCodeObject: {
		Desc:  "Number of NULL code objects found in process_python_frame()",
		Field: "bpf.python.zero_frame_code_object",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindPythonErrBadCodeObjectArgCountAddr: {
		Desc:  "Number of failures to get code object's argcount in process_python_frame()",
		Field: "bpf.python.errors.bad_code_object_arg_count_addr",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDNumExeIDLoadedToEBPF: {
		Desc:  "The number of executables loaded to eBPF maps",
		Field: "agent.num_exe_id_loaded_to_ebpf",
		Type:  MetricTypeGauge,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDHashmapPidPageToMappingInfo: {
		Desc:  "Current size of the hash map pid_page_to_mapping_info",
		Field: "agent.hashmap_pid_page_to_mapping_info.size",
		Type:  MetricTypeGauge,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindNativeErrStackDeltaInvalid: {
		Desc:  "Number of invalid stack deltas in the native unwinder",
		Field: "bpf.native.errors.stack_delta_invalid",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDErrEmptyStack: {
		Desc:  "Number of times unwind_stop is called without a trace",
		Field: "bpf.errors.empty_stack",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDHashmapPyCodeObjectToFileID: {
		Desc:  "Current size of the hash map pycodeobject_to_fileid",
		Field: "agent.hashmap_py_code_object_to_file_id.size",
		Type:  MetricTypeGauge,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindHotspotAttempts: {
		Desc:  "Number of attempted Hotspot frame unwinds",
		Field: "bpf.hotspot.attempts",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindHotspotFrames: {
		Desc:  "Number of unwound Hotspot frames",
		Field: "bpf.hotspot.frames",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindHotspotErrNoCodeblob: {
		Desc:  "Number of failures to get hotspot codeblob address (no heap or bad segmap)",
		Field: "bpf.hotspot.errors.no_codeblob",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindHotspotErrInvalidCodeblob: {
		Desc:  "Number of failures to get codeblob data",
		Field: "bpf.hotspot.errors.invalid_codeblob",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindHotspotErrInterpreterFP: {
		Desc:  "Number of failures to unwind interpreter due to invalid FP",
		Field: "bpf.hotspot.errors.interpreter_fp",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDPythonSymbolizationSuccesses: {
		Desc:  "Number of successfully symbolized python frames",
		Field: "agent.python.symbolization.successes",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDPythonSymbolizationFailures: {
		Desc:  "Number of Python frames that failed symbolization",
		Field: "agent.python.symbolization.failures",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDHotspotSymbolizationSuccesses: {
		Desc:  "Number of successfully symbolized hotspot frames",
		Field: "agent.hotspot.symbolization.successes",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDHotspotSymbolizationFailures: {
		Desc:  "Number of Hotspot frames that failed symbolization",
		Field: "agent.hotspot.symbolization.failures",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindNativeSmallPC: {
		Desc:  "Number of times that PC hold a value smaller than 0x1000",
		Field: "bpf.native.small_pc",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDExeMetadataOverwrite: {
		Desc:  "Indicator for whether the exeMetadata queue has been overwritten",
		Field: "agent.overwrites.exe_metadata",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDCountsForTracesOverwrite: {
		Desc:  "Indicator for whether the countsForTraces queue has been overwritten",
		Field: "agent.overwrites.counts_for_traces",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDMetricsOverwrite: {
		Desc:  "Indicator for whether the metrics queue has been overwritten",
		Field: "agent.overwrites.metrics",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDFramesForTracesOverwrite: {
		Desc:  "Indicator for whether the framesForTraces queue has been overwritten",
		Field: "agent.overwrites.frames_for_traces",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDFrameMetadataOverwrite: {
		Desc:  "Indicator for whether the frameMetadata queue has been overwritten",
		Field: "agent.overwrites.frame_metadata",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDHostMetadataOverwrite: {
		Desc:  "Indicator for whether the hostMetadata queue has been overwritten",
		Field: "agent.overwrites.host_metadata",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDFallbackSymbolsOverwrite: {
		Desc:  "Indicator for whether the fallbackSymbols queue has been overwritten",
		Field: "agent.overwrites.fallback_symbols",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDPerfEventLost: {
		Desc:  "Number of lost perf events in the communication between kernel and user space (report_events)",
		Field: "agent.errors.perf_event_lost",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindNativeStackDeltaStop: {
		Desc:  "Number of stop stack deltas in the native unwinder (success)",
		Field: "bpf.native.stack_delta_stop",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindNativeErrPCRead: {
		Desc:  "Number of times failure to read PC from unwound stack (invalid stack delta)",
		Field: "bpf.native.errors.pc_read",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindNativeErrLookupStackDeltaInnerMap: {
		Desc:  "Number of times that a lookup of a inner map for stack deltas failed",
		Field: "bpf.native.errors.lookup_stack_delta_inner_map",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindNativeErrLookupStackDeltaOuterMap: {
		Desc:  "Number of times that a lookup of the outer map for stack deltas failed",
		Field: "bpf.native.errors.lookup_stack_delta_outer_map",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDErrBPFCurrentComm: {
		Desc:  "Number of times the bpf helper failed to get the current comm of the task",
		Field: "bpf.errors.bpf_current_comm",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindPHPAttempts: {
		Desc:  "Number of attempted PHP unwinds",
		Field: "bpf.php.attempts",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindPHPFrames: {
		Desc:  "Number of unwound PHP frames",
		Field: "bpf.php.frames",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindPHPErrBadCurrentExecuteData: {
		Desc:  "Number of failures to read PHP current execute data pointer",
		Field: "bpf.php.errors.bad_current_execute_data",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindPHPErrBadZendExecuteData: {
		Desc:  "Number of failures to read PHP execute data contents",
		Field: "bpf.php.errors.bad_zend_execute_data",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindPHPErrBadZendFunction: {
		Desc:  "Number of failures to read PHP zend function contents",
		Field: "bpf.php.errors.bad_zend_function",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindPHPErrBadZendOpline: {
		Desc:  "Number of failures to read PHP zend opline contents",
		Field: "bpf.php.errors.bad_zend_opline",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDKernelFallbackSymbolLRUHit: {
		Desc:  "Number of LRU hits for kernel symbols",
		Field: "agent.kernel.fallback_symbol_lru.hits",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDKernelFallbackSymbolLRUMiss: {
		Desc:  "Number of LRU mises for kernel symbols",
		Field: "agent.kernel.fallback_symbol_lru.misses",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDELFInfoCacheHit: {
		Desc:  "Number of cache hits for ELF information",
		Field: "agent.elf_info_cache.hits",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDELFInfoCacheMiss: {
		Desc:  "Number of cache misses for ELF information",
		Field: "agent.elf_info_cache.misses",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDPHPSymbolizationSuccess: {
		Desc:  "Number of successfully symbolized PHP frames",
		Field: "agent.php.symbolization.successes",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDPHPSymbolizationFailure: {
		Desc:  "Number of PHP frames that failed symbolization",
		Field: "agent.php.symbolization.failures",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDPythonAddrToCodeObjectHit: {
		Desc:  "Number of cache hits for Python AddrToCodeObject",
		Field: "agent.python.addr_to_code_object.hits",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDPythonAddrToCodeObjectMiss: {
		Desc:  "Number of cache misses for Python AddrToCodeObject",
		Field: "agent.python.addr_to_code_object.misses",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDHotspotAddrToSymbolHit: {
		Desc:  "Number of cache hits for Hotspot AddrToSymbol",
		Field: "agent.hotspot.addr_to_symbol.hits",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDHotspotAddrToSymbolMiss: {
		Desc:  "Number of cache misses for Hotspot AddrToSymbol",
		Field: "agent.hotspot.addr_to_symbol.misses",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDHotspotAddrToMethodHit: {
		Desc:  "Number of cache hits for Hotspot AddrToMethod",
		Field: "agent.hotspot.addr_to_method.hits",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDHotspotAddrToMethodMiss: {
		Desc:  "Number of cache misses for Hotspot AddrToMethod",
		Field: "agent.hotspot.addr_to_method.misses",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDHotspotAddrToJITInfoHit: {
		Desc:  "Number of cache hits for Hotspot AddrToJITInfo",
		Field: "agent.hotspot.addr_to_jit_info.hits",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDHotspotAddrToJITInfoMiss: {
		Desc:  "Number of cache misses for Hotspot AddrToJITInfo",
		Field: "agent.hotspot.addr_to_jit_info.misses",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDPHPAddrToFuncHit: {
		Desc:  "Number of cache hits for PHP AddrToFunc",
		Field: "agent.php.addr_to_func.hits",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDPHPAddrToFuncMiss: {
		Desc:  "Number of cache misses for PHP AddrToFunc",
		Field: "agent.php.addr_to_func.misses",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDLocalIntervalCacheSize: {
		Desc:  "Current size in bytes of the local interval cache",
		Field: "agent.local_interval_cache.size",
		Type:  MetricTypeGauge,
		Unit:  MetricUnitByte,
	},
	otelmetrics.IDLocalIntervalCacheHit: {
		Desc:  "Number of cache hits of the local interval cache",
		Field: "agent.local_interval_cache.hits",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDLocalIntervalCacheMiss: {
		Desc:  "Number of cache misses of the local interval cache",
		Field: "agent.local_interval_cache.misses",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDPerfEventNoData: {
		Desc:  "Number of times a perf event was received without data (report_events)",
		Field: "agent.errors.perf_event_no_data",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDPerfEventReadError: {
		Desc:  "Number of times a perf event read failed (report_events)",
		Field: "agent.errors.perf_event_read_error",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDRubySymbolizationSuccess: {
		Desc:  "Number of successfully symbolized Ruby frames",
		Field: "agent.ruby.symbolization.successes",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDRubySymbolizationFailure: {
		Desc:  "Number of Ruby frames that failed symbolization",
		Field: "agent.ruby.symbolization.failures",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindRubyAttempts: {
		Desc:  "Number of attempted Ruby unwinds",
		Field: "bpf.ruby.attempts",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindRubyFrames: {
		Desc:  "Number of unwound Ruby frames",
		Field: "bpf.ruby.frames",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDRubyIseqBodyPCHit: {
		Desc:  "Number of cache hits for Ruby IseqBodyPCToFunction",
		Field: "agent.ruby.iseq_body_pc.hits",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDRubyIseqBodyPCMiss: {
		Desc:  "Number of cache misses for Ruby IseqBodyPCToFunction",
		Field: "agent.ruby.iseq_body_pc.misses",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDRubyAddrToStringHit: {
		Desc:  "Number of cache hits for Ruby AddrToString",
		Field: "agent.ruby.addr_to_string.hits",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDRubyAddrToStringMiss: {
		Desc:  "Number of cache misses for Ruby AddrToString",
		Field: "agent.ruby.addr_to_string.misses",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindPerlAttempts: {
		Desc:  "Number of attempted perl unwinds",
		Field: "bpf.perl.attempts",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindPerlFrames: {
		Desc:  "Number of unwound perl frames",
		Field: "bpf.perl.frames",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindPerlTLS: {
		Desc:  "Number of failures to read perl TLS info",
		Field: "bpf.perl.errors.tls",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindPerlReadStackInfo: {
		Desc:  "Number of failures to read perl stack info",
		Field: "bpf.perl.errors.read_stack_info",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindPerlReadContextStackEntry: {
		Desc:  "Number of failures to read perl context stack entry",
		Field: "bpf.perl.errors.read_context_stack_entry",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindPerlResolveEGV: {
		Desc:  "Number of failures to resolve perl EGV",
		Field: "bpf.perl.errors.resolve_egv",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDPerlSymbolizationSuccess: {
		Desc:  "Number of successfully symbolized Perl frames",
		Field: "agent.perl.symbolization.successes",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDPerlSymbolizationFailure: {
		Desc:  "Number of Perl frames that failed symbolization",
		Field: "agent.perl.symbolization.failures",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDPerlAddrToHEKHit: {
		Desc:  "Number of cache hits for Perl AddrToHEK",
		Field: "agent.perl.addr_to_hek.hits",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDPerlAddrToHEKMiss: {
		Desc:  "Number of cache misses for Perl AddrToHEK",
		Field: "agent.perl.addr_to_hek.misses",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDPerlAddrToCOPHit: {
		Desc:  "Number of cache hits for Perl AddrToCOP",
		Field: "agent.perl.addr_to_cop.hits",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDPerlAddrToCOPMiss: {
		Desc:  "Number of cache misses for Perl AddrToCOP",
		Field: "agent.perl.addr_to_cop.misses",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDPerlAddrToGVHit: {
		Desc:  "Number of cache hits for Perl AddrToGV",
		Field: "agent.perl.addr_to_gv.hits",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDPerlAddrToGVMiss: {
		Desc:  "Number of cache misses for Perl AddrToGV",
		Field: "agent.perl.addr_to_gv.misses",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindHotspotErrInvalidRA: {
		Desc:  "Number of failures to unwind because return address was not found with heuristic",
		Field: "bpf.hotspot.errors.invalid_ra",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDKnownTracesHit: {
		Desc:  "Number of cache hits in tracehandler trace cache by BPF hash",
		Field: "bpf.known_traces.hits",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDKnownTracesMiss: {
		Desc:  "Number of cache misses in tracehandler trace cache by BPF hash",
		Field: "bpf.known_traces.misses",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindInfoArraySize: {
		Desc:  "Current size of the unwind info array",
		Field: "agent.unwind_info_array.size",
		Type:  MetricTypeGauge,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDHashmapNumStackDeltaPages: {
		Desc:  "Current size of the stack delta pages hash map",
		Field: "agent.stack_delta_pages.size",
		Type:  MetricTypeGauge,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindV8Attempts: {
		Desc:  "Number of attempted V8 unwinds",
		Field: "bpf.v8.attempts",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindV8Frames: {
		Desc:  "Number of unwound V8 frames",
		Field: "bpf.v8.frames",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindV8ErrBadFP: {
		Desc:  "Number of failures to read V8 frame pointer data",
		Field: "bpf.v8.errors.bad_fp",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindV8ErrBadJSFunc: {
		Desc:  "Number of failures to read V8 Code/JSFunction object",
		Field: "bpf.v8.errors.bad_js_func",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindV8ErrBadCode: {
		Desc:  "Number of failures to read V8 Code object",
		Field: "bpf.v8.errors.bad_code",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDV8SymbolizationSuccess: {
		Desc:  "Number of successfully symbolized V8 frames",
		Field: "agent.v8.symbolization.successes",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDV8SymbolizationFailure: {
		Desc:  "Number of V8 frames that failed symbolization",
		Field: "agent.v8.symbolization.failures",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDV8AddrToStringHit: {
		Desc:  "Number of cache hits for V8 strings",
		Field: "agent.v8.addr_to_string.hits",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDV8AddrToStringMiss: {
		Desc:  "Number of cache misses for V8 strings",
		Field: "agent.v8.addr_to_string.misses",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDV8AddrToSFIHit: {
		Desc:  "Number of cache hits for V8 SharedFunctionInfo",
		Field: "agent.v8.addr_to_sfi.hits",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDV8AddrToSFIMiss: {
		Desc:  "Number of cache misses for V8 SharedFunctionInfo",
		Field: "agent.v8.addr_to_sfi.misses",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDV8AddrToFuncHit: {
		Desc:  "Number of cache hits for V8 Code/JSFunction",
		Field: "agent.v8.addr_to_func.hits",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDV8AddrToFuncMiss: {
		Desc:  "Number of cache misses for V8 Code/JSFunction",
		Field: "agent.v8.addr_to_func.misses",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDV8AddrToSourceHit: {
		Desc:  "Number of cache hits for V8 Source",
		Field: "agent.v8.addr_to_source.hits",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDV8AddrToSourceMiss: {
		Desc:  "Number of cache misses for V8 Source",
		Field: "agent.v8.addr_to_source.misses",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDHotspotAddrToStubNameIDHit: {
		Desc:  "Number of cache hits for Hotspot AddrToStubNameID",
		Field: "agent.hotspot.addr_to_stub_name_id.hits",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDHotspotAddrToStubNameIDMiss: {
		Desc:  "Number of cache misses for Hotspot AddrToStubNameID",
		Field: "agent.hotspot.addr_to_stub_name_id.misses",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDRPCBytesOutCount: {
		Desc:  "Outgoing total RPC byte count (payload, uncompressed)",
		Field: "agent.rpc_bytes_out",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitByte,
	},
	otelmetrics.IDRPCBytesInCount: {
		Desc:  "Incoming total RPC byte count (payload, uncompressed)",
		Field: "agent.rpc_bytes_in",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitByte,
	},
	otelmetrics.IDErrProcNoTextSec: {
		Desc:  "Number of times reading /proc/<PID> failed due to missing text section",
		Field: "agent.errors.proc_no_text_section",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDErrProcNotExist: {
		Desc:  "Number of times reading /proc/<PID> as it does not exist anymore",
		Field: "agent.errors.proc_not_exists",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDErrProcESRCH: {
		Desc:  "Number of times process exits while reading /proc/<PID>",
		Field: "agent.errors.proc_esrch",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDErrProcPerm: {
		Desc:  "Number of times reading /proc/<PID> failed due to missing permission",
		Field: "agent.errors.proc_perm",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDPerlAddrToHEKAdd: {
		Desc:  "Number of added cache elements for Perl AddrToHEK",
		Field: "agent.perl.addr_to_hek.add",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDPerlAddrToHEKDel: {
		Desc:  "Number of deleted cache elements for Perl AddrToHEK",
		Field: "agent.perl.addr_to_hek.del",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDPerlAddrToCOPAdd: {
		Desc:  "Number of added cache elements for Perl AddrToCOP",
		Field: "agent.perl.addr_to_cop.add",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDPerlAddrToCOPDel: {
		Desc:  "Number of deleted cache elements for Perl AddrToCOP",
		Field: "agent.perl.addr_to_cop.del",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDPerlAddrToGVAdd: {
		Desc:  "Number of added cache elements for Perl AddrToGV",
		Field: "agent.perl.addr_to_gv.add",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDPerlAddrToGVDel: {
		Desc:  "Number of deleted cache elementes Perl AddrToGV",
		Field: "agent.perl.addr_to_gv.del",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDHotspotAddrToSymbolAdd: {
		Desc:  "Number of added cache elements for Hotspot AddrToSymbol",
		Field: "agent.hotspot.addr_to_symbol.add",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDHotspotAddrToSymbolDel: {
		Desc:  "Number of deleted cache elements for Hotspot AddrToSymbol",
		Field: "agent.hotspot.addr_to_symbol.del",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDHotspotAddrToMethodAdd: {
		Desc:  "Number of added cache elements for Hotspot AddrToMethod",
		Field: "agent.hotspot.addr_to_method.add",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDHotspotAddrToMethodDel: {
		Desc:  "Number of deleted cache elements for Hotspot AddrToMethod",
		Field: "agent.hotspot.addr_to_method.del",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDHotspotAddrToJITInfoAdd: {
		Desc:  "Number of added cache elements for Hotspot AddrToJITInfo",
		Field: "agent.hotspot.addr_to_jit_info.add",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDHotspotAddrToJITInfoDel: {
		Desc:  "Number of deleted cache elements for Hotspot AddrToJITInfo",
		Field: "agent.hotspot.addr_to_jit_info.del",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDHotspotAddrToStubNameIDAdd: {
		Desc:  "Number of added cache elements for Hotspot AddrToStubNameID",
		Field: "agent.hotspot.addr_to_stub_name.add",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDHotspotAddrToStubNameIDDel: {
		Desc:  "Number of deleted cache elements for Hotspot AddrToStubNameID",
		Field: "agent.hotspot.addr_to_stub_name.del",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDPHPAddrToFuncAdd: {
		Desc:  "Number of added cache elements for PHP AddrToFunc",
		Field: "agent.php.addr_to_func.add",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDPHPAddrToFuncDel: {
		Desc:  "Number of deleted cache elements for PHP AddrToFunc",
		Field: "agent.php.addr_to_func.del",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDPythonAddrToCodeObjectAdd: {
		Desc:  "Number of added cache elements for Python AddrToCodeObject",
		Field: "agent.python.addr_to_code_object.add",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDPythonAddrToCodeObjectDel: {
		Desc:  "Number of deleted cache elements for Python AddrToCodeObject",
		Field: "agent.python.addr_to_code_object.del",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDRubyIseqBodyPCAdd: {
		Desc:  "Number of added cache elements for Ruby IseqBodyPCToFunction",
		Field: "agent.ruby.iseq_body_pc.add",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDRubyIseqBodyPCDel: {
		Desc:  "Number of deleted cache elements for Ruby IseqBodyPCToFunction",
		Field: "agent.ruby.iseq_body_pc.del",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDRubyAddrToStringAdd: {
		Desc:  "Number of added cache elements for Ruby AddrToString",
		Field: "agent.ruby.addr_to_string.add",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDRubyAddrToStringDel: {
		Desc:  "Number of deleted cache elements for Ruby AddrToString",
		Field: "agent.ruby.addr_to_string.del",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDV8AddrToStringAdd: {
		Desc:  "Number of added cache elements for V8 strings",
		Field: "agent.v8.addr_to_string.add",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDV8AddrToStringDel: {
		Desc:  "Number of deleted cache elements for V8 strings",
		Field: "agent.v8.addr_to_string.del",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDV8AddrToSFIAdd: {
		Desc:  "Number of added cache elements for V8 SharedFunctionInfo",
		Field: "agent.v8.addr_to_sfi.add",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDV8AddrToSFIDel: {
		Desc:  "Number of deleted cache elements for V8 SharedFunctionInfo",
		Field: "agent.v8.addr_to_sfi.del",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDV8AddrToFuncAdd: {
		Desc:  "Number of added cache elements for V8 Code/JSFunction",
		Field: "agent.v8.addr_to_func.add",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDV8AddrToFuncDel: {
		Desc:  "Number of deleted cache elements for V8 Code/JSFunction",
		Field: "agent.v8.addr_to_func.del",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDV8AddrToSourceAdd: {
		Desc:  "Number of added cache elements for V8 Source",
		Field: "agent.v8.addr_to_source.add",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDV8AddrToSourceDel: {
		Desc:  "Number of deleted cache elements for V8 Source",
		Field: "agent.v8.addr_to_source.del",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDReportedPIDsErr: {
		Desc:  "Number of times we failed to update reported_pids",
		Field: "bpf.errors.reported_pids",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDRubyMaxSize: {
		Desc:  "Maximum number of size that was requested within the last reporting interval",
		Field: "agent.ruby.max_size",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDPerlHekLen: {
		Desc:  "Maximum number of hekLen that was requested within the last reporting interval",
		Field: "agent.perl.hek_len",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindNativeLr0: {
		Desc:  "Number of times frame unwinding failed because of LR == 0",
		Field: "bpf.native.errors.lr0",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindInfoArrayUpdate: {
		Desc:  "Number of times updating an element in unwindInfoArray failed",
		Field: "agent.errors.unwind_info_array_update",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDExeIDToStackDeltasUpdate: {
		Desc:  "Number of times updating an element in exeIDToStackDeltas failed",
		Field: "agent.errors.exe_id_to_stack_deltas_update",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDExeIDToStackDeltasDelete: {
		Desc:  "Number of times deleting an element from exeIDToStackDeltas failed",
		Field: "agent.errors.exe_id_to_stack_deltas_delete",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDStackDeltaPageToInfoUpdate: {
		Desc:  "Number of times updating an element in stackDeltaPageToInfo failed",
		Field: "agent.errors.stack_delta_page_to_info_update",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDStackDeltaPageToInfoDelete: {
		Desc:  "Number of times deleting an element from stackDeltaPageToInfo failed",
		Field: "agent.errors.stack_delta_page_to_info_delete",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDPidPageToMappingInfoUpdate: {
		Desc:  "Number of times updating an element in pidPageToMappingInfo failed",
		Field: "agent.errors.pid_page_to_mapping_info_update",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDPidPageToMappingInfoDelete: {
		Desc:  "Number of times deleting an element from pidPageToMappingInfo failed",
		Field: "agent.errors.pid_page_to_mapping_info_delete",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDStackDeltaProviderExtractionError: {
		Desc:  "Number of times the stack delta provider failed to extract stack deltas",
		Field: "agent.errors.stack_delta_provider_extraction",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDTraceCacheHit: {
		Desc:  "Number of cache hits in tracehandler trace cache by UM hash",
		Field: "agent.trace_cache.hits",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDTraceCacheMiss: {
		Desc:  "Number of cache misses in tracehandler trace cache by UM hash",
		Field: "agent.trace_cache.misses",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDNumProcAttempts: {
		Desc:  "Number of /proc/PID/maps process attempts",
		Field: "agent.num_proc_attempts",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDPHPFailedToFindReturnAddress: {
		Desc:  "Number of times finding the return address in the interpreter loop failed for PHP 8+.",
		Field: "agent.php.errors.failed_to_find_return_address",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDHotspotUnsupportedFrameSize: {
		Desc:  "Number of times we encountered frame sizes larger than the supported maximum",
		Field: "bpf.hotspot.errors.unsupported_frame_size",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDNumProcNew: {
		Desc:  "Number of new PID events (report_events)",
		Field: "bpf.num_proc_new",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDNumProcExit: {
		Desc:  "Number of exit PID events (report_events)",
		Field: "bpf.num_proc_exit",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDNumUnknownPC: {
		Desc:  "Number of unknown PC events (report_events)",
		Field: "bpf.num_unknown_pc",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDMaxProcParseUsec: {
		Desc:  "Max /proc/PID/maps parse time for a single collection interval, in microseconds",
		Field: "agent.max_proc_parse.us",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitMicroseconds,
	},
	otelmetrics.IDProcPIDStartupMs: {
		Desc:  "Time spent processing /proc/PID/maps on startup, in milliseconds",
		Field: "agent.time.proc_pid_startup",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitMilliseconds,
	},
	otelmetrics.IDTotalProcParseUsec: {
		Desc:  "Total /proc/PID/maps parse time for a single collection interval, in microseconds",
		Field: "agent.time.total_proc_parse",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitMicroseconds,
	},
	otelmetrics.IDKubernetesClientQuery: {
		Desc:  "Number of kubernetes client queries.",
		Field: "agent.kubernetes_client_query",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDDockerClientQuery: {
		Desc:  "Number of docker client queries.",
		Field: "agent.docker_client_query",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDContainerdClientQuery: {
		Desc:  "Number of containerd client queries.",
		Field: "agent.containerd_client_query",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDNumGenericPID: {
		Desc:  "Number of generic PID events (report_events)",
		Field: "agent.num_generic_pid",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDPIDEventsErr: {
		Desc:  "Number of times we failed to update pid_events",
		Field: "bpf.errors.pid_events",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindPythonErrBadCFrameFrameAddr: {
		Desc:  "Number of failures to read _PyCFrame.current_frame in unwind_python()",
		Field: "bpf.python.errors.bad_cframe_frame_addr",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDMaxTailCalls: {
		Desc:  "Number of times stack unwinding was stopped to not hit the limit of tail calls",
		Field: "bpf.tail_calls_max",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindPythonErrNoProcInfo: {
		Desc:  "Number of times we didn't find an entry for this process in the Python process info array",
		Field: "bpf.python.errors.no_proc_info",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindPythonErrBadAutoTlsKeyAddr: {
		Desc:  "Number of failures to read autoTLSkey",
		Field: "bpf.python.errors.bad_auto_tls_key_addr",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindPythonErrReadThreadStateAddr: {
		Desc:  "Number of failures to read the thread state pointer from TLD",
		Field: "bpf.python.errors.read_thread_state_addr",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindPythonErrReadTsdBase: {
		Desc:  "Number of failures to determine the base address for thread-specific data",
		Field: "bpf.python.errors.read_tsd_base",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindRubyErrNoProcInfo: {
		Desc:  "Number of times we didn't find an entry for this process in the Ruby process info array",
		Field: "bpf.ruby.errors.no_proc_info",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindRubyErrReadStackPtr: {
		Desc:  "Number of failures to read the stack pointer from the Ruby context",
		Field: "bpf.ruby.errors.read_stack_ptr",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindRubyErrReadStackSize: {
		Desc:  "Number of failures to read the size of the VM stack from the Ruby context",
		Field: "bpf.ruby.errors.read_stack_size",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindRubyErrReadCfp: {
		Desc:  "Number of failures to read the control frame pointer from the Ruby context",
		Field: "bpf.ruby.errors.read_cfp",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindRubyErrReadEp: {
		Desc:  "Number of failures to read the expression path from the Ruby frame",
		Field: "bpf.ruby.errors.read_ep",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindRubyErrReadIseqBody: {
		Desc:  "Number of failures to read the instruction sequence body",
		Field: "bpf.ruby.errors.read_iseq_body",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindRubyErrReadIseqEncoded: {
		Desc:  "Number of failures to read the instruction sequence encoded size",
		Field: "bpf.ruby.errors.read_iseq_encoded",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindRubyErrReadIseqSize: {
		Desc:  "Number of failures to read the instruction sequence size",
		Field: "bpf.ruby.errors.read_iseq_size",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindNativeErrLrUnwindingMidTrace: {
		Desc:  "Number of times the unwind instructions requested LR unwinding mid-trace",
		Field: "bpf.native.errors.lr_unwinding_mid_trace",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindNativeErrReadKernelModeRegs: {
		Desc:  "Number of failures to read the kernel-mode registers",
		Field: "bpf.native.errors.read_kernel_mode_regs",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindNativeErrChaseIrqStackLink: {
		Desc:  "Number of failures to read the IRQ stack link",
		Field: "bpf.native.errors.chase_irq_stack_link",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindV8ErrNoProcInfo: {
		Desc:  "Number of times we didn't find an entry for this process in the V8 process info array",
		Field: "bpf.v8.errors.no_proc_info",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindNativeErrBadUnwindInfoIndex: {
		Desc:  "Number of times an unwind_info_array index was invalid",
		Field: "bpf.native.errors.bad_unwind_info_index",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDExeIDToStackDeltasBatchUpdate: {
		Desc:  "Number of times batch updating elements in exeIDToStackDeltas failed",
		Field: "agent.errors.exe_id_to_stack_deltas_batch_update",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDStackDeltaPageToInfoBatchUpdate: {
		Desc:  "Number of times batch updating elements in stackDeltaPageToInfo failed",
		Field: "agent.errors.stack_delta_page_to_info_batch_update",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDPidPageToMappingInfoBatchDelete: {
		Desc:  "Number of times batch deleting elements from pidPageToMappingInfo failed",
		Field: "agent.errors.pid_page_to_mapping_info_batch_delete",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDWireBytesOutCount: {
		Desc:  "Outgoing total RPC byte count (on-the-wire, compressed)",
		Field: "agent.wire_bytes_out",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitByte,
	},
	otelmetrics.IDWireBytesInCount: {
		Desc:  "Incoming total RPC byte count (on-the-wire, compressed)",
		Field: "agent.wire_bytes_in",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitByte,
	},
	otelmetrics.IDUnwindHotspotErrLrUnwindingMidTrace: {
		Desc:  "Number of times the Hotspot unwind instructions requested LR unwinding mid-trace",
		Field: "bpf.hotspot.errors.lr_unwinding_mid_trace",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindApmIntErrReadTsdBase: {
		Desc:  "Number of failures to get TSD base for APM correlation",
		Field: "bpf.apmint.errors.read_tsd_base",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindApmIntErrReadCorrBufPtr: {
		Desc:  "Number of failures read the APM correlation pointer",
		Field: "bpf.apmint.errors.read_corr_buf_ptr",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindApmIntErrReadCorrBuf: {
		Desc:  "Number of failures read the APM correlation buffer",
		Field: "bpf.apmint.errors.read_corr_buf",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindApmIntReadSuccesses: {
		Desc:  "Number of successful reads of APM correlation info",
		Field: "bpf.apmint.read.successes",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindDotnetAttempts: {
		Desc:  "Number of attempted dotnet unwinds",
		Field: "bpf.dotnet.attempts",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindDotnetFrames: {
		Desc:  "Number of unwound dotnet frames",
		Field: "bpf.dotnet.frames",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindDotnetErrNoProcInfo: {
		Desc:  "Number of times we didn't find an entry for this process in the dotnet process info array",
		Field: "bpf.dotnet.errors.no_proc_info",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindDotnetErrBadFP: {
		Desc:  "Number of failures to read dotnet frame pointer data",
		Field: "bpf.dotnet.errors.bad_fp",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindDotnetErrCodeHeader: {
		Desc:  "Number of failures to read dotnet CodeHeader",
		Field: "bpf.dotnet.errors.code_header",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDUnwindDotnetErrCodeTooLarge: {
		Desc:  "Number of failures to unwind dotnet frame due to large code size",
		Field: "bpf.dotnet.errors.code_too_large",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDDotnetSymbolizationSuccesses: {
		Desc:  "Number of successfully symbolized dotnet frames",
		Field: "agent.dotnet.symbolization.successes",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDDotnetSymbolizationFailures: {
		Desc:  "Number of dotnet frames that failed symbolization",
		Field: "agent.dotnet.symbolization.failures",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDDotnetAddrToMethodHit: {
		Desc:  "Number of cache hits for dotnet AddrToMethod",
		Field: "agent.dotnet.addr_to_method.hits",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDDotnetAddrToMethodMiss: {
		Desc:  "Number of cache misses for dotnet AddrToMethod",
		Field: "agent.dotnet.addr_to_method.misses",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
	otelmetrics.IDStackDeltaProviderSuccess: {
		Desc:  "Number of times the stack delta provider succeeded to extract stack deltas",
		Field: "agent.stack_delta_extraction.success",
		Type:  MetricTypeCounter,
		Unit:  MetricUnitNone,
	},
}
